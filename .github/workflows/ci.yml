name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '24.x'
  NPM_CACHE_FOLDER: ~/.npm
  NPM_CONFIG_CACHE: ~/.npm

jobs:
  # Linting und Code-QualitÃ¤t
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check code formatting
        run: npm run format:check || echo "Code formatting check not configured"
        
      - name: TypeScript type check
        run: npx tsc --noEmit

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Run tests with coverage
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true  # Don't fail CI if coverage upload fails

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start server for integration tests
        run: |
          # Kill any existing processes on port 4000
          pkill -f "node.*server" || true
          sleep 2
          
          # Start server in background with specific port
          npm start &
          SERVER_PID=$!
          
          # Wait for server to be ready
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:4000/api/v1/health > /dev/null 2>&1; then
              echo "Server is ready!"
              break
            fi
            echo "Attempt $i: Server not ready yet..."
            sleep 2
          done
          
          # Store PID for cleanup
          echo $SERVER_PID > server.pid
        env:
          NODE_ENV: test
          PORT: 4000
          HOST: localhost
          CACHE_ENABLED: true
          CORS_ORIGIN: "*"
          RATE_LIMIT_MAX: 1000
          DEFAULT_TIMEOUT: 10000
          
      - name: Run API integration tests
        run: |
          # Run Vitest integration tests
          npm run test:run -- test/integration/
        env:
          NODE_ENV: test
          API_BASE_URL: http://localhost:4000
          
      - name: Cleanup server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          pkill -f "node.*server" || true

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 30

  # Docker Build (Local only - no push)
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image (local only)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: api-adapter-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./dist
          
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: Deploy to Heroku, AWS, etc.
        env:
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./dist
          
      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: Deploy to Heroku, AWS, etc.
        env:
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start server
        run: |
          # Kill any existing processes on port 4000
          pkill -f "node.*server" || true
          sleep 2
          
          # Start server in background
          npm start &
          SERVER_PID=$!
          
          # Wait for server to be ready
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:4000/api/v1/health > /dev/null 2>&1; then
              echo "Server is ready!"
              break
            fi
            echo "Attempt $i: Server not ready yet..."
            sleep 2
          done
          
          # Store PID for cleanup
          echo $SERVER_PID > server.pid
        env:
          NODE_ENV: test
          PORT: 4000
          HOST: localhost
          
      - name: Run performance tests
        run: |
          # Add performance testing logic here
          # Example: Artillery, k6, or custom performance tests
          echo "Running performance tests..."
          npm run test:performance || echo "Performance tests not configured"
        continue-on-error: true
        
      - name: Cleanup server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          pkill -f "node.*server" || true

  # Documentation Generation
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate OpenAPI documentation
        run: npm run generate-docs || echo "Documentation generation not configured"
        continue-on-error: true
        
      - name: Generate TypeScript client
        run: npm run generate-client-auto || echo "Client generation not configured"
        continue-on-error: true
        
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            docs/
            api/
            generated-client/
          retention-days: 90

  # Notify on Success/Failure
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "â CI/CD Pipeline completed successfully!"
          # Add notification logic (Slack, Teams, etc.)
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "â CI/CD Pipeline failed!"
          # Add notification logic (Slack, Teams, etc.) 